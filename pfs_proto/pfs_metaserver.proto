syntax = "proto3";

// Proto file for metaserver-client connections
import "google/protobuf/empty.proto";

package pfsmeta;

// Common message types
message MetaStatus {
  bool success = 1;
  string message = 2;
}

message FileIdentifier {
  string filename = 1;
}

// FileRecipe to define distribution properties
message FileRecipe {
  uint64 block_size = 1;        // Size of each block in bytes (PFS_BLOCK_SIZE)
  int32 stripe_width = 2;       // Number of servers in the stripe (fixed across the system)
  int32 stripe_blocks = 3;      // Number of blocks per stripe before rotating to the next server
}


// Metadata about a file, with recipe-based distribution
message FileMetadata {
  string filename = 1;
  uint64 size = 2;
  int64 creation_time = 3;
  int64 last_close_time = 4;
  FileRecipe recipe = 5;        // Distribution recipe for calculating block location
}

// Token related messages
message TokenRequest {
  uint64 fd = 1;
  uint64 start_offset = 2;
  uint64 length = 3;
  bool is_write = 4;
  int32 client_id = 5;
}

message TokenResponse {
  bool granted = 1;
  uint64 start_offset = 2;
  uint64 length = 3;
  string message = 4;
  repeated uint64 cacheable_blocks = 5;
  uint64 filesize = 6;

}

// Messages for client initialization
message ClientInitRequest {
  string client_hostname = 1;
}

message ClientInitResponse {
  int32 client_id = 1;
  bool success = 2;
  string message = 3;
}

// Message for creating a file
message CreateFileRequest {
  string filename = 1;
  int32 stripe_width = 2;
}

message OpenFileRequest {
  string filename = 1;
  int32 mode = 2;
  int32 client_id = 3;
}

message OpenFileResponse {
  int32 fd = 1;
  bool success = 2;
  string message = 3;

}

message CloseFileRequest {
  int32 fd = 1;
  int32 client_id = 2;
  string filename = 3;
}

message RegistrationRequest {
  int32 client_id = 1;
  string client_hostname = 2;
  bool is_shutdown=3;
  string requested_id=4;
  string message = 5;
}


message Notification {
    string action = 1;  // e.g., "invalidate", "revoke
    string filename = 2;
    uint64 start_offset = 3;  // Start of the range to revoke
    uint64 length = 4;        // Length of the range to revoke
    string message = 5;
    uint64 block_number = 6;
    string requested_by = 7;
}

// Request message for invalidating a block
message InvalidateBlockRequest {
  string filename = 1;          // Name of the file
  uint64 block_number = 2;         // Block number to invalidate
  uint64 client_id = 3;            // ID of the client making the request
  bool is_write =4;
}

// Response message for invalidating a block
message InvalidateBlockResponse {
  bool success = 1;             // Whether the invalidation was successful
  string message = 2;           // Any additional information or error details
  bool can_cache=3;
}

// Metadata Server Service
service MetadataService {
  // Client initialization
  rpc InitializeClient(ClientInitRequest) returns (ClientInitResponse);
  
  // File operations
  rpc CreateFile(CreateFileRequest) returns (MetaStatus);
  rpc DeleteFile(FileIdentifier) returns (MetaStatus);
  rpc GetFileMetadata(FileIdentifier) returns (FileMetadata);
  
  // Token management
  rpc RequestToken(TokenRequest) returns (TokenResponse);
  rpc ReleaseToken(TokenRequest) returns (MetaStatus);
  rpc Alive(google.protobuf.Empty) returns (MetaStatus);

  // Invalidate a specific block for a given file
  rpc InvalidateBlock(InvalidateBlockRequest) returns (InvalidateBlockResponse);


   // File open/close operations
  rpc OpenFile(OpenFileRequest) returns (OpenFileResponse);
  rpc CloseFile(CloseFileRequest) returns (MetaStatus);

  rpc ClientRegister(stream RegistrationRequest) returns (stream Notification);


  
}
